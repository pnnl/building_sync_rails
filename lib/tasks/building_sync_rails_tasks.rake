require "fileutils"
require "open-uri"
require "set"

# @return [String] the format string for an XML Schema Definition (XSD) import element
FORMAT_XSD_IMPORT_ = '<%s:import namespace="%s" schemaLocation="%s"/>'.freeze

# @return [Regexp] the regular expression for an XML Schema Definition (XSD) import element
REGEXP_XSD_IMPORT_ = ::Regexp.new([
  ::Regexp.escape('<'),
  '([^:]+)',
  ::Regexp.escape(':import'),
  '\s+',
  ::Regexp.escape('namespace="'),
  '([^"]+)',
  ::Regexp.escape('"'),
  '\s+',
  ::Regexp.escape('schemaLocation="'),
  '([^"]+)',
  ::Regexp.escape('"'),
  '\s*',
  ::Regexp.escape('/>'),
].join).freeze

# Download an XML Schema Definition (XSD) file and recursively download its dependencies.
#
# @param url [String] the URL of the XML Schema Definition (XSD) file to download
# @param verbose [Boolean] specifies the verbosity level
# @param cached_urls [Set<String>] the cache of URLs that have been downloaded
# @return [void]
def download_schema_recursive(url, verbose = true, cached_urls = ::Set.new)
  if cached_urls.include?(url)
    return
  else
    cached_urls << url
  end

  $stderr.puts(::Kernel.sprintf("** Download %s", url)) if verbose

  s = ::URI.parse(url).open do |io|
    io.read.gsub(REGEXP_XSD_IMPORT_) { |match_s|
      prefix = ::Regexp.last_match[1]
      namespace = ::Regexp.last_match[2]
      schema_location = ::Regexp.last_match[3]

      download_schema_recursive(schema_location, verbose, cached_urls)

      # @note Replace the URL with the path on the local disk.
      ::Kernel.sprintf(FORMAT_XSD_IMPORT_, prefix, namespace, schema_location.split(::File::SEPARATOR)[-1])
    }
  end

  # @note Open the new file in binary mode to avoid character encoding issues.
  ::File.open(::File.join("public", url.split(::File::SEPARATOR)[-1]), "wb") do |io|
    io.puts(s)
  end

  return
end

namespace :building_sync_rails do
  desc "Use BuildingSync XSD file to generate Ruby code via `xsd2ruby.rb` script."
  task :xsd2ruby => :environment do
    # @!attribute [r] uri_xsd_remote
    #   @return [String] the location of the BuildingSync XSD file on the remote nework
    uri_xsd_remote = "https://github.com/BuildingSync/schema/raw/develop-v2/BuildingSync.xsd"

    # @!attribute [r] options_by_local_name
    #   @return [Hash<String, Hash<Symbol, Array<Hash<Symbol, Object>>>>] the options by the local name of each Ruby source file
    #   @note Ruby source files are auto-generated by the "soap4r" gem.  This data structure contains the information that is used to sanitize the auto-generated code, making it suitable for revision management.
    options_by_local_name = {
      "BuildingSync.rb" => {
        delete_at: [
          {
            index: 4,
            count: 2,
          },
          {
            index: -2,
            count: 2,
          },
        ],
        indent_at: [
          {
            first_index: 4,
            last_index: -2,
            count: 1,
            separator: '  ',
          },
        ],
      },
      "BuildingSync_mapper.rb" => {
        delete_at: [
          {
            index: 3,
            count: 2,
          },
          {
            index: -2,
            count: 2,
          },
        ],
        indent_at: [],
      },
      "BuildingSync_mapping_registry.rb" => {
        delete_at: [
          {
            index: 3,
            count: 2,
          },
          {
            index: -2,
            count: 2,
          },
        ],
        indent_at: [],
      },
    }

    # @note Download the BuildingSync XSD file from the remote network and copy to the local disk.
    download_schema_recursive(uri_xsd_remote, verbose)

    # @note Execute the "xsd2ruby.rb" binary that is installed by the "soap4r" gem.  The Ruby source files are created in the "/" directory.
    ::Bundler.with_clean_env do
      `xsd2ruby.rb --xsd #{::File.join("public", uri_xsd_remote.split(::File::SEPARATOR)[-1])} --module_path "BuildingSync" --classdef "BuildingSync" --mapping_registry --mapper --force --quiet`
    end

    # @note Sanitize the contents of each Ruby source file.
    options_by_local_name.each do |local_name, options|
      s = ::File.open(local_name, "r") do |file|
        array = file.read.split($/)

        options[:delete_at].each do |hash|
          hash[:count].times { array.delete_at(hash[:index]) }
        end

        options[:indent_at].each do |hash|
          array[::Range.new(hash[:first_index], hash[:last_index], false)].each do |s|
            s.gsub!(::Regexp.new("^(.*?)$"), ::Kernel.sprintf('%s\1', ::Array.new(hash[:count], hash[:separator]).join("")))
            s.rstrip!
          end
        end

        array.join($/)
      end

      ::File.open(local_name, "w") do |file|
        file.puts(s)
      end
    end

    # @note Move the Ruby source files to the "lib/" directory.
    options_by_local_name.keys.each do |local_name|
      ::FileUtils.mv(local_name, ::File.join("lib", local_name)) if ::File.exist?(local_name)
    end
  end
end
